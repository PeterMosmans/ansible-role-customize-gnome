---
# tasks file for PeterMosmans.customize-gnome

- name: Parse Gnome Shell version
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      gnome-shell --version | sed 's/GNOME Shell \(.*\)/\1/'
    executable: /bin/bash
  register: r_gnome_extension_parse_shell_version
  changed_when: no

- name: Set Gnome Shell version as parameter
  ansible.builtin.set_fact:
    gnome_shell_version: "{{ r_gnome_extension_parse_shell_version.stdout }}"

- name: Check if Gnome Shell was detected
  ansible.builtin.debug:
    msg: "Sorry - no Gnome Shell detected... exiting"
  failed_when: true
  when: not r_gnome_extension_parse_shell_version.stdout

- name: Install (font) packages
  ansible.builtin.apt:
    name: "{{ item }}"
    update_cache: yes
    install-recommends: no
    state: present
  become: yes
  loop: "{{ gnome_packages|default([]) }}"

- name: Ensure that target directory exists
  ansible.builtin.file:
    path: "/home/{{ gnome_user }}/.config/{{ gtk_version }}"
    state: directory
  become_user: "{{ gnome_user }}"
  when: gtk_version is defined

- name: Copy files
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ gnome_user }}"
    group: "{{ gnome_user }}"
    mode: 0644
  loop: "{{ gnome_files|default([]) }}"
  loop_control:
    label: "{{ item.src }}"
  tags:
    - files

- name: Install fonts
  ansible.builtin.include_tasks:
    file: install_font.yml
  loop: "{{ gnome_fonts | default([]) }}"
  loop_control:
    label: "{{ gnome_font.name }}"
    loop_var: gnome_font
  tags:
    - fonts

- name: Refresh font list
  ansible.builtin.command: fc-cache -fv
  changed_when: false
  tags:
    - fonts

- name: Load Gnome extension information
  include_tasks: get_extension_info.yml
  loop: "{{ gnome_extensions }}"

- name: Download GNOME Shell extensions
  get_url:
    url: "{{ item.url }}"
    dest: "/tmp/{{ item.name }}.zip"
  loop: "{{ gnome_extensions_full|default([]) }}"
  loop_control:
    label: "{{ item.name }}"
  tags:
    - extensions

- name: Create GNOME extension directories
  file:
    path: /home/{{ gnome_user }}/.local/share/gnome-shell/extensions/{{ item.name }}
    state: directory
  become_user: "{{ gnome_user }}"
  loop: "{{ gnome_extensions_full|default([]) }}"
  loop_control:
    label: "{{ item.name }}"
  tags:
    - extensions

- name: Unzip GNOME extensions
  ansible.builtin.unarchive:
    src: "/tmp/{{ item.name }}.zip"
    dest: "/home/{{ gnome_user }}/.local/share/gnome-shell/extensions/{{ item.name }}"
    remote_src: yes
  become_user: "{{ gnome_user }}"
  loop: "{{ gnome_extensions_full|default([]) }}"
  loop_control:
    label: "{{ item.name }}"
  tags:
    - extensions

- name: Enable extensions
  ansible.builtin.command: gnome-shell-extension-tool -e {{ item.name }}
  become_user: "{{ gnome_user }}"
  when: item.enable | default(false)
  loop: "{{ gnome_extensions_full | default([]) }}"
  loop_control:
    label: "{{ item.name }}"
  register: r_gnome_enable_extension
  changed_when: "'is now enabled' in r_gnome_enable_extension.stderr"
  failed_when: r_gnome_enable_extension.rc != 0 and 'already enabled' not in r_gnome_enable_extension.stderr
  tags:
    - settings

- name: Modify application settings using gsettings
  ansible.builtin.command:
    cmd: gsettings {{ ('--schemadir ' + item.schemadir) if 'schemadir' in item else '' }} set {{ item.schema }} {{ item.key }} {{ item.value }}
  become_user: "{{ gnome_user }}"
  changed_when: false
  loop: "{{ gnome_gsettings|default([]) }}"
  loop_control:
    label: "{{ item.key }}"
  tags:
    - settings

- name: Modify application settings using dconf
  ansible.builtin.command: dbus-launch dconf write {{ item.key }} {{ item.value }}
  become_user: "{{ gnome_user }}"
  loop: "{{ gnome_dconf|default([]) }}"
  loop_control:
    label: "{{ item.key }}"
  changed_when: false
  tags:
    - settings
    - dconf
